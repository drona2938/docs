{
  "swagger": "2.0",
  "info": {
    "version": "1.1",
    "title": "API Docs"
  },
  "tags": [
    {
      "name": "Accounts"
    },
    {
      "name": "Users"
    }
  ],
  "security": [
    {
        "APIKeyHeader": []
    }
  ],
  "paths": {
    "/accounts/me": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Get business account details.",
        "operationId": "getPageInformation",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                  "page_id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "type": "string"
                  },
                  "active": {
                    "type": "boolean",
                    "description": "If false the admins of the bot can't access the dashboard."
                  },
                  "created": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Timestamp representing the date the bot was created"
                  },
                  "total_users": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The total number of bot users."
                  }
              }
            }            
          }
        }
      }
    },  
    "/accounts/admins": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Get all admins from a business account.",
        "operationId": "getPageTags",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Admin"
              }
            }
          }
        }
      }
    },  
    "/accounts/tags": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Get all tags from a business account.",
        "operationId": "getPageTags",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tag"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Accounts"
        ],
        "description": "Create a new tag",
        "operationId": "createTag",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The the new tag ID."
                }
              },
              "example": {
                "id": 1995
              }
            }
          }
        }
      }
    },
    "/accounts/tags/{tag_id}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Get tag by id",
        "operationId": "getTagById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Accounts"
        ],
        "description": "Delete a tag",
        "operationId": "deleteTag",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              },
              "example": {
                "success": true
              }
            }
          }
        }
      }
    },
    "/accounts/tags/name/{tag_name}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Get a tag by name",
        "operationId": "getTagByName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tag_name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        }
      }
    },
    "/accounts/flows": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Get all flows from a business account.",
        "operationId": "getPageFlows",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/accounts/custom_fields": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Get all custom fields from a business account.",
        "operationId": "getPageCustomFields",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "type": "integer",
                    "description": "0 - Text, 1 - Number, 2- Date (Unix timestamp), 3 - Date & Time (Unix timestamp), 4 - Boolean(0 or 1)"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Accounts"
        ],
        "description": "Create a custom field",
        "operationId": "createCustomField",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [          
          {
            "name": "content",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "required": true,
                  "type": "string"
                },
                "type": {
                  "type": "integer",
                  "required": true,
                  "enum": [0, 1, 2, 3, 4],
                  "description":"0 - text | 1 - number | 2 - date | 3 - datetime | 4 - true/false"
                },
                "isBotField": {
                  "type": "boolean",
                  "default": false,
                  "required": false
                },
                "value": {
                  "type": "string",
                  "required": false,
                  "description":"The value of the bot field. It is ignored for the user custom field."
                },
                "description": {
                  "type": "string",
                  "required": false
                }
              },
              "example": {
                "name": "lead_score",
                "type": 1
              }
            }
          }
        ],       
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The ID of the new custom field"
                },
                "name": {
                  "type": "string"
                }
              },
              "example": {
                "id": 1995,
                "name":"lead_score"
              }
            }
          }
        }
      }
    },
    "/accounts/custom_fields/{custom_field_id}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Get custom field by id",
        "operationId": "getCustomFieldById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "custom_field_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "integer",
                  "description": "0 - Text, 1 - Number, 2- Date (Unix timestamp), 3 - Date & Time (Unix timestamp), 4 - Boolean(0 or 1)"
                },
                "description": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/custom_fields/name/{custom_field_name}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Get custom field by name",
        "operationId": "getCustomFieldByName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "custom_field_name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "integer",
                  "description": "0 - Text, 1 - Number, 2- Date (Unix timestamp), 3 - Date & Time (Unix timestamp), 4 - Boolean(0 or 1)"
                },
                "description": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },"/accounts/bot_fields/{bot_field_id}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "description": "Get bot field value by id",
        "operationId": "getBFieldValue",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bot_field_id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "id":{
                    "type": "integer"
                },
                "type": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "value":{
                  "type": "string"
                }
              },
              "example": {
                "id": 2334,
                "name": "age",
                "type": 1,
                "value": 25
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Accounts"
        ],
        "description": "Set a bot field value",
        "operationId": "setBField",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bot_field_id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "value",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              },
              "example": {
                "success": true
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Accounts"
        ],
        "description": "Unset the value of a bot field",
        "operationId": "removeBField",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bot_field_id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              },
              "example": {
                "success": true
              }
            }
          }
        }
      }
    },
    "/accounts/template/{template_id}/generateSingleUseLink": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "description": "Generate single-use template link",
        "operationId": "generateTemplateLink",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description":"You can get template ID from the template link"
          }
        ],     
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "link": {
                  "type": "string"
                }
              },
              "example": {
                "link": "https://..."
              }
            }
          }
        }
      }
    },
    "/users/{user_id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Get user by user id",
        "operationId": "getUserByName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/find_by_custom_field": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Find users by custom field value. It will return maximum 100 users. The results are sorted by the last custom field value update for a user. ",
        "operationId": "findByCustomField",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Custom field ID. Use 'phone' or 'email' as custom field id if you want to find the user by phone or email"
          },
          {
            "name": "value",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "properties": {                  
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/User"
                    },
                    "maximum": "100"
                }
              },
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid parameters"
          }
        }
      }
    },
    "/users/{user_id}/tags": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Get all tags added to this user",
        "operationId": "getUserTags",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tag"
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/tags/{tag_id}": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Add a tag to the user",
        "operationId": "addTagToUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              },
              "example": {
                "success": true
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "description": "remove a tag from the user",
        "operationId": "removeTagFromUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              },
              "example": {
                "success": true
              }
            }
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Create a new SMS or WhatsApp.",
        "operationId": "createNewContact",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [          
          {
            "name": "content",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "phone": {
                  "required": true,
                  "type": "string",
                  "description": "The phone number with country code"
                },
                "first_name": {
                  "type": "string",
                  "required": false
                },
                "last_name": {
                  "type": "string",
                  "required": false
                },
                "gender": {
                  "type": "string",
                  "required": false,
                  "enum": [
                    "male",
                    "female",
                    "unknown"
                  ]
                },
                "actions": {
                  "type": "array",
                  "required": false,
                  "description": "Actions can be send flow, add/remove tags, set/unset custom field ..."
                }
              },
              "example": {
                "phone": "+1234567890",
                "first_name": "John",
                "last_name": "Smith",
                "gender": "male",
                "actions":[{"action":"send_flow", "flow_id": 11111},{"action":"add_tag", "tag_name": "YOU_TAG_NAME"},{"action":"set_field_value", "field_name": "YOU_CUSTOM_FIELD_NAME","value":"ANY_VALUE"}]
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/users/{user_id}/custom_fields": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Get all custom fields from a user",
        "operationId": "getUserFields",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Custom_field"
              }
            }
          }
        }
      }
    },  
    "/users/{user_id}/custom_fields/{custom_field_id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Get custom field value by id",
        "operationId": "getFieldValue",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "custom_field_id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "id":{
                    "type": "integer"
                },
                "type": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "value":{
                  "type": "string"
                }
              },
              "example": {
                "id": 2334,
                "name": "age",
                "type": 1,
                "value": 25
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Set a user custom field",
        "operationId": "addFieldToUser",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "custom_field_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              },
              "example": {
                "success": true
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "description": "remove a custom field from the user",
        "operationId": "removeFieldFromUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "custom_field_id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              },
              "example": {
                "success": true
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/send/{flow_id}": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Send a flow to user",
        "operationId": "sendFlowToUser",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "flow_id",
            "in": "path",
            "required": true,
            "type": "integer"
          }          
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/users/{user_id}/send/text": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Send text message to the contact",
        "operationId": "sendTextMessage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "content",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {                
                "text":{
                  "required": true,
                  "type": "string"
                },
                "channel":{
                  "required": false,
                  "type": "string",
                  "enum": ["messenger","whatsapp","sms","webchat","telegram","instagram","viber", "omnichannel"]
                }               
              },
              "example": {
                "text": "This is a text message",
                "channel": "messenger"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              },
              "example": {
                "success": true
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/send/file": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Send file",
        "operationId": "sendFile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "content",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {                
                "url":{
                  "required": true,
                  "type": "string"
                },
                "type":{
                  "required": true,
                  "type": "string",
                  "enum": ["file","image","audio","video"]
                },
                "channel":{
                  "required": false,
                  "type": "string",
                  "enum": ["messenger","sms","whatsapp","googleBM","telegram","instagram","viber", "omnichannel"]
                }               
              },
              "example": {
                "url": "https://...",
                "type":"image",
                "channel": "messenger"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              },
              "example": {
                "success": true
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/send_content": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Allows to run multiple actions and send multiple messages. Works for all channels.",
        "operationId": "sendContent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "content",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {                
                "messages": {
                  "type": "array",
                  "required": false
                },
                "actions": {
                  "type": "array",
                  "required": false
                },"channel":{
                  "required": false,
                  "type": "string",
                  "enum": ["messenger","sms","whatsapp","googleBM","telegram","instagram","rcs","viber", "omnichannel"]
                },"message_tag":{
                  "required": false,
                  "type": "string",
                  "enum":["CONFIRMED_EVENT_UPDATE", "POST_PURCHASE_UPDATE","ACCOUNT_UPDATE"],
                  "description": "Only used by Messenger channel. Use Message channel to send messages outside 24h window"
                }
              },
              "example": {
                "messages": [{"message":{"text": "Hello world"}}],
                "actions": [],
                "channel": "messenger"
              }
            },
            "description": ""
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/pipelines/":{
      "get": {
        "tags": [
          "Pipelines"
        ],
        "description": "Get list of pipelines",
        "operationId": "getPipelines",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "description":"Specifies the starting position of the first record to return in a paginated response."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "description":"Sets the maximum number of records to return per request."
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data":{
                    "type": "array",
                    "items":{
                      "$ref":"#/definitions/Pipeline"
                    }
                }
              }
            }
          }
        }
      }
    },
    "/pipelines/{pipeline_id}":{
      "get": {
        "tags": [
          "Pipelines"
        ],
        "description": "Get list of pipelines",
        "operationId": "getPipelines",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Pipeline"
            }
          }
        }
      }
    },
    "/pipelines/{pipeline_id}/stages":{
      "get": {
        "tags": [
          "Pipelines"
        ],
        "description": "Get list of pipeline stages",
        "operationId": "getPipelineStages",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data":{
                    "type": "array",
                    "items":{
                      "$ref":"#/definitions/PipelineStage"
                    }
                }
              }
            }
          }
        }
      }
    },
    "/pipelines/{pipeline_id}/opportunities": {
      "get": {
        "tags": [
          "Pipelines"
        ],
        "description": "Get list of opportunities / tickets",
        "operationId": "pipelinesGetCards",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "type": "number"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "description":"Specifies the starting position of the first record to return in a paginated response."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "description":"Sets the maximum number of records to return per request."
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data":{
                    "type": "array",
                    "items":{
                      "$ref":"#/definitions/Opportunity"
                    }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Pipelines"
        ],
        "description": "Creates an opportunity / ticket.",
        "operationId": "pipelinesAddCard",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "type": "number"
          },
          {
            "name": "content",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "contact_id":{
                  "type": "number",
                  "required": true
                },
                "title": {
                  "type": "string",
                  "required": true
                },
                "description": {
                  "type": "string",
                  "required": false
                },
                "stage_id":{
                  "required": false,
                  "type": "number",
                  "description": "if omitted, the the contact is added to first stage."
                },
                "value":{
                  "required": false,
                  "type": "number",
                  "default":"0"
                },
                "status":{
                  "required": false,
                  "type": "string",
                  "default":"open",
                  "enum":["open", "won","lost"],
                  "description": "won is positive and lost is negative"
                },
                "priority":{
                  "required": false,
                  "type": "string",
                  "default":"medium",
                  "enum":["low", "medium","high"]
                },
                "assigned_admins":{
                  "required": false,
                  "type": "array",
                  "default": []
                }           
              },
              "example": {
                "contact_id":"12345678",
                "title": "This is a test opportunity",
                "description":"...",
                "stage_id":12334,
                "value":300,
                "status":"open",
                "priority":"low",
                "assigned_admins":[55446563]
              }
            },
            "description": "Creates an opportunity / ticket"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties":{
                "data":{
                  "type":"array",
                  "items": {
                    "$ref": "#/definitions/Opportunity"
                  }
                }
              }             
            }
          }
        }
      }
    },
    "/pipelines/{pipeline_id}/opportunities/{opportunity_id}":{
      "get": {
        "tags": [
          "Pipelines"
        ],
        "description": "Get an opportunity / ticket",
        "operationId": "pipelinesGetCard",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "type": "number"
          },
          {
            "name": "opportunity_id",
            "in": "path",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Opportunity"
            }
          }
        }
      },
      "post":{
        "tags": [
          "Pipelines"
        ],
        "description": "Updates an opportunity / ticket.",
        "operationId": "pipelinesUpdateCard",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "type": "number"
          },
          {
            "name": "opportunity_id",
            "in": "path",
            "required": true,
            "type": "number"
          },
          {
            "name": "content",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {               
                "title": {
                  "type": "string",
                  "required": true
                },
                "description": {
                  "type": "string",
                  "required": false
                },
                "stage_id":{
                  "required": false,
                  "type": "number",
                  "description": "if omitted, the the contact is added to first stage."
                },
                "value":{
                  "required": false,
                  "type": "number",
                  "default":"0"
                },
                "status":{
                  "required": false,
                  "type": "string",
                  "default":"open",
                  "enum":["open", "won","lost"],
                  "description": "won is positive and lost is negative"
                },
                "priority":{
                  "required": false,
                  "type": "string",
                  "default":"medium",
                  "enum":["low", "medium","high"]
                },
                "assigned_admins":{
                  "required": false,
                  "type": "array",
                  "default": []
                }           
              },
              "example": {
                "title": "This is a test opportunity",
                "description":"...",
                "stage_id":12334,
                "value":300,
                "status":"open",
                "priority":"low",
                "assigned_admins":[55446563]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              },
              "example": {
                "success": true
              }
            }
          }
        }
      },
      "delete":{
        "tags": [
          "Pipelines"
        ],
        "description": "Delete an opportunity / ticket",
        "operationId": "pipelinesDeleteCard",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "type": "number"
          },
          {
            "name": "opportunity_id",
            "in": "path",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              },
              "example": {
                "success": true
              }
            }
          }
        }
      }

    },
    "/pipelines/{pipeline_id}/opportunities/{opportunity_id}/comments":{
      "get": {
        "tags": [
          "Pipelines"
        ],
        "description": "Get list of comments of an opportunity / ticket",
        "operationId": "pipelinesGetComments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "type": "number"
          },
          {
            "name": "opportunity_id",
            "in": "path",
            "required": true,
            "type": "number"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "description":"Specifies the starting position of the first record to return in a paginated response."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "description":"Sets the maximum number of records to return per request."
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties":{
                "data":{
                  "type":"array",
                  "items": {
                    "$ref": "#/definitions/OpportunityComment"
                  }
                }
              }             
            }
          }
        }
      },
      "post":{
        "tags": [
          "Pipelines"
        ],
        "description": "Creates a new comment on an opportunity / ticket.",
        "operationId": "pipelinesAddComment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "type": "number"
          },
          {
            "name": "opportunity_id",
            "in": "path",
            "required": true,
            "type": "number"
          },
          {
            "name": "content",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {               
                "content": {
                  "type": "string",
                  "required": true
                }        
              },
              "example": {
                "content": "This is a comment"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OpportunityComment"
            }
          }
        }
      }
    },
    "/pipelines/{pipeline_id}/opportunities/{opportunity_id}/comments/{comment_id}":{
      "delete":{
        "tags": [
          "Pipelines"
        ],
        "description": "Delete a comment of an opportunity / ticket",
        "operationId": "pipelinesDeleteComment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pipeline_id",
            "in": "path",
            "required": true,
            "type": "number"
          },
          {
            "name": "opportunity_id",
            "in": "path",
            "required": true,
            "type": "number"
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              },
              "example": {
                "success": true
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/send/products": {
      "post": {
        "tags": [
          "Ecommerce"
        ],
        "description": "Send a product message to the user",
        "operationId": "sendProduct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {                
                "product_id": {
                  "type": "array",
                  "required": true,
                  "description":"The product_id  field could be a single product id, an array of product ids, or multiple product ids separated by a comma"
                }
              },
              "example": {
                "product_id": [1111,222,3333]
              }
            },
            "description": ""
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/users/{user_id}/cart": {
      "get": {
        "tags": [
          "Ecommerce"
        ],
        "description": "Get the user cart ready for checkout",
        "operationId": "getUserCart",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Cart"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Ecommerce"
        ],
        "description": "Clear the user cart",
        "operationId": "clearUserCart",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              },
              "example": {
                "success": true
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/pay/{order_id}": {
      "post": {
        "tags": [
          "Ecommerce"
        ],
        "description": "Mark an order as Paid.",
        "operationId": "payOrder",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "amount_received",
            "in": "formData",
            "required": true,
            "type": "integer",
            "description": "Total value the user paid in cents."
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              },
              "example": {
                "success": true
              }
            }
          },
          "400": {
            "description": "The amount received is less than the total value of the order."
          },
          "402": {
            "description": "The user received a message on Messenger why the checkout failed."
          },
          "404": {
            "description": "The order ID doesn't existe"
          }
        }
      }
    },
    "/users/{user_id}/order/{order_id}": {
      "get": {
        "tags": [
          "Ecommerce"
        ],
        "description": "Get order information",
        "operationId": "getUserOrder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Cart"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Ecommerce"
        ],
        "description": "Change order status.",
        "operationId": "changeOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "content",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "status":{
                  "name": "status",
                  "in": "formData",
                  "required": false,
                  "type": "integer",
                  "enum": [6,7,10,13],
                  "description": "The new order status. 6 - Processing, 7 - Shipped, 10 - Completed, 13 - Canceled."
                },
                "name": {
                  "required": false,
                  "type": "string",
                  "name": "The name for the shipping"
                },
                "phone": {
                  "required": false,
                  "type": "string",
                  "name": "The phone for the shipping"
                },  
                "email": {
                  "required": false,
                  "type": "string",
                  "name": "The email for the shipping"
                },
                "country":{
                  "required": false,
                  "type": "string",
                  "name": "The country for the shipping"
                },
                "state":{
                  "required": false,
                  "type": "string",
                  "name": "The state for the shipping"
                },
                "city":{
                  "required": false,
                  "type": "string",
                  "name": "The city for the shipping"
                },
                "zip_code":{
                  "required": false,
                  "type": "string",
                  "name": "The zip code for the shipping"
                },
                "address":{
                  "required": false,
                  "type": "string",
                  "name": "The address for the shipping"
                },
                "street_1":{
                  "required": false,
                  "type": "string",
                  "name": "The street_1 for the shipping"
                },
                "street_2": {
                  "required": false,
                  "type": "string",
                  "name": "The street_2 for the shipping"
                },
                "note": {
                  "required": false,
                  "type": "string",
                  "name": "Note related to the order."
                }

              },
              "example": {
                "status": 7
              }
            }
          }
          
          
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              },
              "example": {
                "success": true
              }
            }
          },
          "400": {
            "description": "Order status must be 6, 7, 10, or 13"
          },
          "402": {
            "description": "The order status is the same as the previous status"
          },
          "404": {
            "description": "The order ID doesn't existe"
          }
        }
      }
    },
    "/users/{user_id}/cart/{product_id}": {
      "post": {
        "tags": [
          "Ecommerce"
        ],
        "description": "Add a product to user cart",
        "operationId": "addProductCart",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "quantity",
            "in": "formData",
            "required": true,
            "type": "integer",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              },
              "example": {
                "success": true
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Ecommerce"
        ],
        "description": "remove a product from user cart",
        "operationId": "removeProductCart",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                }
              },
              "example": {
                "success": true
              }
            }
          }
        }
      }
    },
    "/products/{product_id}": {
      "get": {
        "tags": [
          "Ecommerce"
        ],
        "description": "Get product by id",
        "operationId": "getProductById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Ecommerce"
        ],
        "description": "Update product.",
        "operationId": "updateProduct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [      
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number"
          },    
          {
            "name": "content",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "price": {
                  "required": false,
                  "type": "number"
                },
                "active": {
                  "required": false,
                  "type": "boolean",
                  "description": "if users can buy the product."
                },
                "stock": {
                  "type": "number",
                  "required": false
                }
              },
              "example": {
                "active": false,
                "stock":500,
                "price":40
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean"
                },
                "updated": {
                  "type": "boolean"
                }
              },
              "example": {
                "success": true,
                "updated": true
              }
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "APIKeyHeader": {
      "type": "apiKey",
      "in": "header",
      "name": "X-ACCESS-TOKEN"
    }
  },
  "definitions": {
    "Cart": {
      "type": "object",
      "description": "All value related to money is in cents",
      "properties": {
        "order_id": {
          "type": "string"
        },
        "page_id": {
          "type": "integer",
          "format": "int64"
        },
        "user_id": {
          "type": "integer",
          "format": "int64"
        },
        "currency": {
          "type": "string"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "subtotal": {
          "type": "integer",
          "format": "int64"
        },
        "total_items": {
          "type": "integer",
          "format": "int32"
        },
        "coupon_discount": {
          "type": "integer",
          "format": "int64"
        },
        "coupon": {
          "type": "string"
        },
        "line_items": {
          "type": "array",
          "xml": {
            "name": "line_items",
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/ProductCart"
          }
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "xml": {
        "name": "cart"
      }
    },
    "Order": {
      "type": "object",
      "description": "All value related to money is in cents",
      "properties": {
        "id": {
          "type": "string"
        },
        "page_id": {
          "type": "integer",
          "format": "int64"
        },
        "user_id": {
          "type": "integer",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "description": "Subscribed date in UTC. Example 2022-10-12 14:40:00"
        },
        "created_timestamp": {
          "type": "integer",
          "format": "int32",
          "description": "Date of the order in epoch/Unix timestamp"
        },
        "currency": {
          "type": "string"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "subtotal": {
          "type": "integer",
          "format": "int64"
        },
        "shipping_cost": {
          "type": "integer",
          "format": "int64"
        },
        "total_taxes": {
          "type": "integer",
          "format": "int64"
        },
        "total_discounts": {
          "type": "integer",
          "format": "int64"
        },
        "total_items": {
          "type": "integer",
          "format": "int32"
        },
        "coupon_discount": {
          "type": "integer",
          "format": "int64"
        },
        "coupon": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Not processed",
            "Accepted",
            "Delivering",
            "Completed",
            "Canceled"
          ]
        },
        "line_items": {
          "type": "array",
          "xml": {
            "name": "line_items",
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/ProductCart"
          }
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "xml": {
        "name": "cart"
      }
    },
    "ProductCart": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "img": {
          "type": "string"
        },
        "price": {
          "type": "number",
          "format": "double",
          "description": "the price is not in cents"
        },
        "amount": {
          "type": "integer",
          "description": "quantity"
        },
        "descr_min": {
          "type": "string"
        },"manufacturer": {
          "type": "integer",
          "description": "The vendor ID"
        },"variant": {
          "type": "string"
        },"user_msg": {
          "type": "string"
        }
      },
      "xml": {
        "name": "ProductCart"
      }
    },
    "Custom_field": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "type": "integer",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "description": "0 - Text, 1 - Number, 2- Date (Unix timestamp), 3 - Date & Time (Unix timestamp), 4 - Boolean(0 or 1)"
        },
        "value": {
          "type": "string",
          "description": "type == 0 then value is string, else value is a number"
        }
      },
      "xml": {
        "name": "Custom_field"
      }
    },
    "Admin": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "email": {
          "type": "string"
        },"first_name": {
          "type": "string"
        },"last_name": {
          "type": "string"
        },"full_name": {
          "type": "string"
        },"profile_pic": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "Pipeline": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Pipeline"
      }
    },
    "PipelineStage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "PipelineStage"
      }
    },
    "OpportunityComment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "format": "int64"
        },
        "data": {
          "type": "string"
        },
        "created_at":{
          "type": "string",
          "example": "2028-02-08 12:34:56",
          "description":"UTC"
        },
        "created_by": {
          "type": "number",
          "description":"Admin ID"
        }
      },
      "xml": {
        "name": "OpportunityComment"
      }
    },    
    "Opportunity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number"
        },
        "contact_id": {
          "type": "number"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "value": {
          "type": "number"
        },
        "status": {
          "type": "string"
        },
        "priority": {
          "type": "string"
        },
        "stage": {
          "type": "object",
          "properties":{
            "id": {
              "type": "number"
            },
            "name": {
              "type": "string"
            }
          }
        },
        "assigned_admins":{
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "created_at":{
          "type": "string",
          "example": "2028-02-08 12:34:56",
          "description":"UTC"
        },
        "created_by": {
          "type": "number",
          "description":"Admin ID"
        },
        "updated_at":{
          "type": "string",
          "example": "2028-02-08 12:34:56",
          "description":"UTC"
        },
        "updated_by": {
          "type": "number",
          "description":"Admin ID"
        }        
      },
      "xml": {
        "name": "Opportunity"
      }
    },
    "Product": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "price": {
          "type": "number",
          "format": "double"
        },
        "sale_price": {
          "type": "number",
          "format": "double"
        },
        "category_id": {
          "type": "integer",
          "format": "int64"
        },
        "category_name": {
          "type": "string"
        },
        "stock": {
          "type": "integer",
          "format": "int64"
        },
        "short_description": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "description": "Subscribed date in UTC. Example 2022-10-12 14:40:00"
        }
      },
      "xml": {
        "name": "Product"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "page_id": {
          "type": "integer",
          "format": "int64"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "channel": {
          "type": "integer",
          "description": "0 - Messenger, 2 - SMS, 5 - WhatsApp, 7 - Google Business Message, 8 - Telegram, 9 - Webchat"
        },
        "profile_pic": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "gender": {
          "type": "integer",
          "description": "0 - Female, 1 - Male, 2 - Unknown"
        },
        "timezone": {
          "type": "integer"
        },
        "last_sent": {
          "type": "integer",
          "format": "int64",
          "description": "Unix timestamp in milliseconds"
        },
        "last_delivered": {
          "type": "integer",
          "format": "int64",
          "description": "Unix timestamp in milliseconds"
        },
        "last_seen": {
          "type": "integer",
          "format": "int64",
          "description": "Unix timestamp in milliseconds"
        },
        "last_interaction": {
          "type": "integer",
          "format": "int64",
          "description": "Unix timestamp in milliseconds"
        },
        "subscribed_date": {
          "type": "string",
          "description": "Subscribed date in UTC. Example 2022-10-12 14:40:00"
        },
        "subscribed": {
          "type": "integer",
          "description": "1 - Subscribed, 2 - Unsubscribed"
        },
        "tags": {
          "type": "array",
          "xml": {
            "name": "tag",
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "custom_fields": {
          "type": "array",
          "xml": {
            "name": "tag",
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/Custom_field"
          }
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Account": {
      "type": "object", 
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },"name": {
          "type": "string"
        },"fb_page_id": {
          "type": "integer",
          "format": "int64"
        },"instagram_id": {
          "type": "integer",
          "format": "int64"
        },"waba_id": {
          "type": "integer",
          "format": "int64"
        },"wa_phone_id": {
          "type": "integer",
          "format": "int64"
        },"viber_id": {
          "type": "integer",
          "format": "int64"
        },
        "active": {
          "type": "integer",
          "enum": [0, 1],
          "description": "0 - False, 1 True"
        },"plan": {
          "type": "integer",
          "enum": [1, 4, 6, 13, 15],
          "description": "1 - Pro Subscription, 4 - FREE, 6 - Pro No Subscription, 11 - LTD, 12 - LTD, 13 - PRO Trial - Downgrade to FREE at the end, 15 - PRO Trial - Force to pay at the end"
        },
        "created": {
          "type": "string",
          "description": "The date (UTC) when the account was created"
        }
      },
      "xml": {
        "name": "Account"
      }
    }
  },
  "schemes": [
    "https"
  ],
  "host": "api.appcontx.com",
  "basePath": "/"
}
